"""
Django settings for Verifier project.

Generated by 'django-admin startproject' using Django 4.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

BASE_DIR = Path(__file__).resolve().parent.parent
load_dotenv(BASE_DIR / "Verifier" / ".env")
DEBUG = int(os.environ.get("DJANGO_DEBUG", True))
PRODUCTION = int(os.environ.get("PRODUCTION", False))
CSRF_TRUSTED_ORIGINS = [
    "https://login.microsoftonline.com",
    "https://verifier.cofc.edu",
]

ALLOWED_HOSTS = [
    "verifier.cofc.edu",
    "verifier.charleston.edu",
    "127.0.0.1",
    "localhost",
]

SECRET_KEY = os.environ.get("DJANGO_SECRET_KEY")


INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "web",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

# model backend for development
AUTHENTICATION_BACKENDS = ["django.contrib.auth.backends.ModelBackend"]

# Get loglevel from env
LOGLEVEL = os.getenv("DJANGO_LOGLEVEL", "info").upper()

LOGGING = {
    "version": 1,
    "disable_existing_loggers": True,
    "handlers": {
        "console": {
            "level": LOGLEVEL,
            "class": "logging.StreamHandler",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["console"],
            "level": LOGLEVEL,
            "propagate": True,
        },
    },
}

LOGIN_URL = "/login/"
LOGIN_REDIRECT_URL = "/"

ROOT_URLCONF = "Verifier.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "Verifier.wsgi.application"

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"
TIME_ZONE = "America/New_York"
USE_I18N = True
USE_L10N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
# For dev, when debug off
STATICFILES_DIRS = (os.path.join(BASE_DIR, "web", "static"),)

# Without PHONENUMBER_DEFAULT_REGION = 'US' in the settings, django-phonenumberfield
# won't allow you to input anything users from the United States would recognize as a phone number.
PHONENUMBER_DEFAULT_REGION = "US"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field


DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


PASSPHRASE_LENGTH = 4
ETHOS_GRAPHQL_URL = "https://integrate.elluciancloud.com/graphql"
ETHOS_AUTH_URL = "https://integrate.elluciancloud.com/auth"


MESSAGE_TEMPLATE = "Provide the following passphrase to IT Service desk: {{passphrase}}"
PASSPHRASE_LENGTH = int(os.environ.get("PASSPHRASE_LENGTH", 4))
TWILIO_ACCOUNT_SID = os.environ.get("TWILIO_ACCOUNT_SID", "")
TWILIO_AUTH_TOKEN = os.environ.get("TWILIO_AUTH_TOKEN", "")
TWILIO_MESSAGING_SERVICE_SID = os.environ.get("TWILIO_MESSAGING_SERVICE_SID", "")
ETHOS_API_KEY = os.environ.get("ETHOS_API_KEY", "")


# PROD specific settings
if PRODUCTION:
    # This is necessary because Azure does not guarantee
    # to return scopes in the same case and order as requested
    os.environ["OAUTHLIB_RELAX_TOKEN_SCOPE"] = "1"
    os.environ["OAUTHLIB_IGNORE_SCOPE_CHANGE"] = "1"
    MICROSOFT_AUTH_CLIENT_ID = os.environ.get("MICROSOFT_AUTH_CLIENT_ID", "")
    MICROSOFT_AUTH_CLIENT_SECRET = os.environ.get("MICROSOFT_AUTH_CLIENT_SECRET", "")
    MICROSOFT_AUTH_TENANT_ID = os.environ.get("MICROSOFT_AUTH_TENANT_ID", "")
    MICROSOFT_AUTH_SCOPES = os.environ.get(
        "MICROSOFT_AUTH_SCOPES", "openid profile offline_access user.read"
    )
    MICROSOFT_AUTH_AUTHORITY = os.environ.get(
        "MICROSOFT_AUTH_AUTHORITY",
        f"https://login.microsoftonline.com/{MICROSOFT_AUTH_TENANT_ID}",
    )
    MICROSOFT_AUTH_AUTHORIZE_ENDPOINT = (
        f"{MICROSOFT_AUTH_AUTHORITY}/oauth2/v2.0/authorize"
    )
    MICROSOFT_AUTH_TOKEN_ENDPOINT = f"{MICROSOFT_AUTH_AUTHORITY}/oauth2/v2.0/token"
    MICROSOFT_AUTH_REDIRECT_URI = os.environ.get(
        "MICROSOFT_AUTH_REDIRECT_URI", "/custom-microsoft-callback"
    )
    MICROSOFT_AUTH_SERVICE_PRINCIPAL_ID = os.environ.get(
        "MICROSOFT_AUTH_SERVICE_PRINCIPAL_ID", ""
    )
    if not all(
        [
            MICROSOFT_AUTH_CLIENT_ID,
            MICROSOFT_AUTH_CLIENT_SECRET,
            MICROSOFT_AUTH_TENANT_ID,
            MICROSOFT_AUTH_SCOPES,
            MICROSOFT_AUTH_SERVICE_PRINCIPAL_ID,
        ]
    ):
        raise ValueError(
            "Missing one or more required environment variables for Microsoft Authentication"
        )

    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.mysql",
            "NAME": os.environ.get("MYSQL_DATABASE", ""),
            "USER": os.environ.get("MYSQL_USER", ""),
            "PASSWORD": os.environ.get("MYSQL_PASSWORD", ""),
            "HOST": os.environ.get("MYSQL_HOST", "localhost"),
            "PORT": "3306",
        }
    }
    SITE_ID = 1
